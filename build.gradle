buildscript {
    repositories {
        maven { url("https://maven.aliyun.com/repository/public") }
        maven { url("https://maven.aliyun.com/repository/spring") }
        maven { url("https://maven.aliyun.com/repository/mapr-public") }
        maven { url("https://maven.aliyun.com/repository/spring-plugin") }
        maven { url("https://maven.aliyun.com/repository/gradle-plugin") }
        maven { url("https://maven.aliyun.com/repository/google") }
        maven { url("https://maven.aliyun.com/repository/jcenter") }
    }
}

plugins {
    id "de.undercouch.download" version "4.1.1"
}

def mainVersion = "1.2.0"
Map<String, String> envMap = new HashMap<>(System.getenv())
def imageRepository = envMap.getOrDefault("IMAGE_REPOSITORY ", "wangz2019/docker-novnc")
def alpineRepo = envMap.getOrDefault("ALPINE_REPO", "mirrors.aliyun.com")
String imageWithTag = "${imageRepository}:${mainVersion}"
File runtimeDockerDirectory = project.file("${project.buildDir}/runtime/docker")

task buildDockerImage() {
    doFirst {
        runtimeDockerDirectory.mkdirs()
        runtimeDockerDirectory.delete()
        copy {
            from project.file("docker")
            into runtimeDockerDirectory
        }
        download {
            src "https://github.com/novnc/noVNC/archive/refs/tags/v1.2.0.tar.gz"
            dest runtimeDockerDirectory
            tempAndMove true
            overwrite false
        }
    }
    doLast {
        exec {
            commandLine(
                    "docker", "build",
                    "--rm",
                    "-f", project.file("${runtimeDockerDirectory.getAbsolutePath()}/Dockerfile"),
                    "-t", imageWithTag,
                    "--build-arg", "ALPINE_REPO=${alpineRepo}",
                    runtimeDockerDirectory,
            )
        }
    }
}

task pushDockerImage() {
    doLast {
        exec {
            commandLine(
                    "docker", "buildx", "build",
                    "--platform", "linux/amd64,linux/arm64,linux/arm/v7",
                    "--rm",
                    "-f", project.file("${runtimeDockerDirectory.getAbsolutePath()}/Dockerfile"),
                    "-t", imageWithTag,
                    "--push",
                    runtimeDockerDirectory,
            )
        }
    }
    dependsOn(buildDockerImage)
}

def containerName = "docker-novnc"
def port = 6080
task runDockerContainer(type: Exec) {
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "run", "--rm",
            "--add-host", "host.docker.internal:host-gateway",
            "-p", "${port}:6080",
            "-e", "VNC_SERVER=host.docker.internal:5901",
            "--name", containerName,
            "-d", imageWithTag,
    )
    doLast {
        println("visit http://localhost:${port}/vnc.html")
    }
}

task stopDockerContainer(type: Exec) {
    executable("docker")
    args(
            "stop", containerName
    )
}

apply from: project.file("docs.nginx.gradle")
